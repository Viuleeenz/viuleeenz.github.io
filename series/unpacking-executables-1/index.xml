<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unpacking Executables 1 on Security Undisguised</title><link>https://Viuleeenz.github.io/series/unpacking-executables-1/</link><description>Recent content in Unpacking Executables 1 on Security Undisguised</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 02 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://Viuleeenz.github.io/series/unpacking-executables-1/index.xml" rel="self" type="application/rss+xml"/><item><title>Manually unpacking of packed executable</title><link>https://Viuleeenz.github.io/posts/2021/09/manually-unpacking-of-packed-executable/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://Viuleeenz.github.io/posts/2021/09/manually-unpacking-of-packed-executable/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this post, I will show how to manually unpack a simple executable that has been packed with WinUPack.
However, the goal of this post is to provide a general approach to start reversing code and, in general, packers.
Because of that it will be hard to cover all the techniques and strategies that could be applied,
but I will try to give the rights hints and the mindset to approach these challenges.&lt;/p></description></item></channel></rss>